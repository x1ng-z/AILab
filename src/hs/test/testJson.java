package hs.test;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.mchange.lang.ArrayUtils;
import hs.ApcAlgorithm.ExecutePythonBridge;
import hs.Configuartion.SpringAnnotationConfigure;
import hs.Opc.OPCService;
import javafx.css.Match;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author zzx
 * @version 1.0
 * @date 2020/3/19 10:41
 */
public class testJson {

    private  static Pattern pvpattern = Pattern.compile("(^pv\\d+$)");



    private  static Pattern opcpattern = Pattern.compile("([a-zA-Z]*)([0-9|.]*)");

    public void  test(){
        double[] dd=new double[2];
        for(double d:dd){
            System.out.println(d);
        }
        JSONObject jsonObject=JSONObject.parseObject("{\"mv\": [0.0], \"dmv\": [0.0], \"e\": [0.0], \"predict\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], \"funelupAnddown\": [[5.0, 4.97986577181208, 4.959731543624161, 4.939597315436242, 4.919463087248322, 4.899328859060403, 4.879194630872483, 4.859060402684563, 4.8389261744966445, 4.818791946308725, 4.798657718120805, 4.778523489932886, 4.758389261744966, 4.7382550335570475, 4.718120805369128, 4.697986577181208, 4.677852348993289, 4.657718120805369, 4.6375838926174495, 4.617449664429531, 4.597315436241611, 4.577181208053691, 4.557046979865772, 4.5369127516778525, 4.516778523489933, 4.496644295302014, 4.476510067114094, 4.456375838926174, 4.436241610738255, 4.416107382550336, 4.395973154362416, 4.375838926174497, 4.355704697986577, 4.3355704697986575, 4.315436241610739, 4.295302013422819, 4.275167785234899, 4.25503355704698, 4.23489932885906, 4.214765100671141, 4.194630872483222, 4.174496644295302, 4.154362416107382, 4.134228187919463, 4.114093959731544, 4.093959731543624, 4.073825503355705, 4.053691275167785, 4.033557046979865, 4.0134228187919465, 3.9932885906040267, 3.9731543624161074, 3.953020134228188, 3.9328859060402683, 3.912751677852349, 3.8926174496644297, 3.87248322147651, 3.8523489932885906, 3.8322147651006713, 3.8120805369127515, 3.791946308724832, 3.771812080536913, 3.751677852348993, 3.731543624161074, 3.7114093959731544, 3.6912751677852347, 3.671140939597316, 3.651006711409396, 3.6308724832214767, 3.6107382550335574, 3.5906040268456376, 3.5704697986577183, 3.550335570469799, 3.530201342281879, 3.51006711409396, 3.4899328859060406, 3.469798657718121, 3.4496644295302015, 3.429530201342282, 3.4093959731543624, 3.389261744966443, 3.3691275167785237, 3.348993288590604, 3.3288590604026846, 3.3087248322147653, 3.2885906040268456, 3.2684563758389262, 3.248322147651007, 3.228187919463087, 3.208053691275168, 3.1879194630872485, 3.1677852348993287, 3.1476510067114094, 3.12751677852349, 3.1073825503355703, 3.0872483221476514, 3.0671140939597317, 3.046979865771812, 3.026845637583893, 3.0067114093959733, 2.986577181208054, 2.966442953020134, 2.946308724832215, 2.9261744966442955, 2.906040268456376, 2.8859060402684564, 2.865771812080537, 2.845637583892618, 2.825503355704698, 2.8053691275167787, 2.7852348993288594, 2.7651006711409396, 2.7449664429530203, 2.724832214765101, 2.704697986577181, 2.684563758389262, 2.6644295302013425, 2.6442953020134228, 2.6241610738255035, 2.604026845637584, 2.5838926174496644, 2.563758389261745, 2.5436241610738257, 2.5234899328859064, 2.5033557046979866, 2.4832214765100673, 2.463087248322148, 2.442953020134228, 2.422818791946309, 2.4026845637583896, 2.38255033557047, 2.3624161073825505, 2.342281879194631, 2.3221476510067114, 2.302013422818792, 2.2818791946308727, 2.2617449664429534, 2.2416107382550337, 2.2214765100671143, 2.201342281879195, 2.1812080536912752, 2.161073825503356, 2.1409395973154366, 2.120805369127517, 2.1006711409395975, 2.080536912751678, 2.0604026845637584, 2.040268456375839, 2.0201342281879198, 2.0], [-5.0, -4.97986577181208, -4.959731543624161, -4.939597315436242, -4.919463087248322, -4.899328859060403, -4.879194630872483, -4.859060402684563, -4.8389261744966445, -4.818791946308725, -4.798657718120805, -4.778523489932886, -4.758389261744966, -4.7382550335570475, -4.718120805369128, -4.697986577181208, -4.677852348993289, -4.657718120805369, -4.6375838926174495, -4.617449664429531, -4.597315436241611, -4.577181208053691, -4.557046979865772, -4.5369127516778525, -4.516778523489933, -4.496644295302014, -4.476510067114094, -4.456375838926174, -4.436241610738255, -4.416107382550336, -4.395973154362416, -4.375838926174497, -4.355704697986577, -4.3355704697986575, -4.315436241610739, -4.295302013422819, -4.275167785234899, -4.25503355704698, -4.23489932885906, -4.214765100671141, -4.194630872483222, -4.174496644295302, -4.154362416107382, -4.134228187919463, -4.114093959731544, -4.093959731543624, -4.073825503355705, -4.053691275167785, -4.033557046979865, -4.0134228187919465, -3.9932885906040267, -3.9731543624161074, -3.953020134228188, -3.9328859060402683, -3.912751677852349, -3.8926174496644297, -3.87248322147651, -3.8523489932885906, -3.8322147651006713, -3.8120805369127515, -3.791946308724832, -3.771812080536913, -3.751677852348993, -3.731543624161074, -3.7114093959731544, -3.6912751677852347, -3.671140939597316, -3.651006711409396, -3.6308724832214767, -3.6107382550335574, -3.5906040268456376, -3.5704697986577183, -3.550335570469799, -3.530201342281879, -3.51006711409396, -3.4899328859060406, -3.469798657718121, -3.4496644295302015, -3.429530201342282, -3.4093959731543624, -3.389261744966443, -3.3691275167785237, -3.348993288590604, -3.3288590604026846, -3.3087248322147653, -3.2885906040268456, -3.2684563758389262, -3.248322147651007, -3.228187919463087, -3.208053691275168, -3.1879194630872485, -3.1677852348993287, -3.1476510067114094, -3.12751677852349, -3.1073825503355703, -3.0872483221476514, -3.0671140939597317, -3.046979865771812, -3.026845637583893, -3.0067114093959733, -2.986577181208054, -2.966442953020134, -2.946308724832215, -2.9261744966442955, -2.906040268456376, -2.8859060402684564, -2.865771812080537, -2.845637583892618, -2.825503355704698, -2.8053691275167787, -2.7852348993288594, -2.7651006711409396, -2.7449664429530203, -2.724832214765101, -2.704697986577181, -2.684563758389262, -2.6644295302013425, -2.6442953020134228, -2.6241610738255035, -2.604026845637584, -2.5838926174496644, -2.563758389261745, -2.5436241610738257, -2.5234899328859064, -2.5033557046979866, -2.4832214765100673, -2.463087248322148, -2.442953020134228, -2.422818791946309, -2.4026845637583896, -2.38255033557047, -2.3624161073825505, -2.342281879194631, -2.3221476510067114, -2.302013422818792, -2.2818791946308727, -2.2617449664429534, -2.2416107382550337, -2.2214765100671143, -2.201342281879195, -2.1812080536912752, -2.161073825503356, -2.1409395973154366, -2.120805369127517, -2.1006711409395975, -2.080536912751678, -2.0604026845637584, -2.040268456375839, -2.0201342281879198, -2.0]]}");
        ;
        JSONArray jsonArray=jsonObject.getJSONArray("funelupAnddown");
        BigDecimal[] aa=new BigDecimal[150];
        JSONArray jsonArray1=(JSONArray)jsonArray.get(0);

        BigDecimal aDouble=(BigDecimal)jsonArray1.get(0);
        jsonArray1.toArray(aa);
    }
    public static void main(String[] args) {

        int[][] test_length=new int[2][3];

        for(int ti:test_length[0]){
                System.out.println(ti);
        }

        System.out.println(test_length.length);
        System.out.println(test_length[0].length);

        Matcher matcher=pvpattern.matcher("pv");

        if(matcher.find()){
            System.out.println(matcher.group());
        }

        StringBuilder stringBuilder= new StringBuilder();

        stringBuilder.append(1);
        stringBuilder.append(2);
        stringBuilder.append(3);
        stringBuilder.append(4);
        System.out.println(stringBuilder.substring(0,stringBuilder.length()-1));




        double[][] dd=new double[2][2];

        int i=3;
        if(i==1){
            System.out.println(i+"=1");
        }else if(i==2){
            System.out.println(i+"=2");
        }else {
            System.out.println(i+"=other");
        }

        Matcher matcher1 =opcpattern.matcher("opc192.169.10.212");

        if(matcher1.find()){
            System.out.println(matcher1.group(2));
        }

        matcher1=opcpattern.matcher("opc192.169.10.212");


        if(matcher1.find()){
            System.out.println(matcher1.group(2));
        }







        List<String> testremove=new ArrayList<>();
        boolean nullelem=testremove.remove("1");
        int[][] pvusemv=new int[2][2];
        int [] data = {1,2,3,4,5,6,7,8,9};
        int [] newData;
        newData = Arrays.copyOfRange(data, 0, 7);




       new testJson().test();

        ExecutePythonBridge executePythonBridge=new ExecutePythonBridge(
                "E:\\project\\2020_Project\\MPC\\Model\\test.py",
                "http://localhost:8080/python/modlebuild/"+1+".do","1");

            executePythonBridge.execute();
        try {
            TimeUnit.SECONDS.sleep(3);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        executePythonBridge.stop();
//        for(JSONObject jsonObject1:jsonObject.values()){
//
//        }

        //ffresp: [{"ff":"ff1","pv7":"","pv6":"","pv8":"","pv1":"{\"k\":10,\"t\":180,\"tao\":200}","pv3":"","pv2":"","pv5":"","pv4":"","LAY_TABLE_INDEX":0},{"ff":"ff2","pv7":"","pv6":"","pv8":"","pv1":"","pv3":"","pv2":"","pv5":"","pv4":"","LAY_TABLE_INDEX":1},{"ff":"ff3","pv7":"","pv6":"","pv8":"","pv1":"","pv3":"","pv2":"","pv5":"","pv4":"","LAY_TABLE_INDEX":2},{"ff":"ff4","pv7":"","pv6":"","pv8":"","pv1":"","pv3":"","pv2":"","pv5":"","pv4":"","LAY_TABLE_INDEX":3},{"ff":"ff5","pv7":"","pv6":"","pv8":"","pv1":"","pv3":"","pv2":"","pv5":"","pv4":"","LAY_TABLE_INDEX":4},{"ff":"ff6","pv7":"","pv6":"","pv8":"","pv1":"","pv3":"","pv2":"","pv5":"","pv4":"","LAY_TABLE_INDEX":5},{"ff":"ff7","pv7":"","pv6":"","pv8":"","pv1":"","pv3":"","pv2":"","pv5":"","pv4":"","LAY_TABLE_INDEX":6},{"ff":"ff8","pv7":"","pv6":"","pv8":"","pv1":"","pv3":"","pv2":"","pv5":"","pv4":"","LAY_TABLE_INDEX":7}]

//        Map<String,Double[]> responsmap=new HashMap<String,Double[]>();
//        String json = "{k:1.6,wn:1,zata:0.16,tao:1}";//"{'1':{'k':1.6,'wn':1,'zata':0.16,'tao':1},'2':{'k':1.6,'wn':1,'zata':0.16,'tao':1},'T':100}";
//        JSONObject json_test = JSON.parseObject(json);
//        int periodT=json_test.getInteger("T");
//        for(String key:json_test.keySet()){
//            if(key!="T"){
//                JSONObject modlemath =json_test.getJSONObject(key);
//                Double[] respon=new Double[periodT];
//
//                //float delta=1f;
//                Double Wdi= Math.sqrt(1 - Math.pow(modlemath.getFloat("zata"), 2)) * modlemath.getFloat("wn");
//                for(int i=0;i<periodT;i++){
//                    if(i<modlemath.getFloat("tao")){
//                        respon[i]=0d;
//                        continue;
//                    }
//                    double temp_e=(Math.exp(-1 * modlemath.getFloat("wn") * modlemath.getFloat("zata") * ((i+1) -modlemath.getFloat("tao")))) / Math.sqrt(1-Math.pow(modlemath.getFloat("zata"),2));
//                    double temp_sin=Math.sin(Wdi * ((i+1) -modlemath.getFloat("tao")) + Math.atan(Math.sqrt(1-Math.pow(modlemath.getFloat("zata"),2)) / modlemath.getFloat("zata")));
//                    respon[i]=modlemath.getInteger("k")*(1-temp_e*temp_sin);
//                }
//                responsmap.put(key,respon);
//
//            }
//
//        }
//
//        new JSONObject();
//        System.out.println(json_test);
    }
}
